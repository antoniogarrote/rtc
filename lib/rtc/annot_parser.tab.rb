#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'rtc/annot_lexer.rex'
require 'rtc/parser'
require 'rtc/typing/types.rb'

module Rtc

  class TypeAnnotationParser < Racc::Parser

    attr_accessor :pos, :proxy

    # FIXME(rwsims): it's not clear what proxy is for, it's used when defining
    # class constants for doing class type signatures.
    def initialize(proxy)
        @proxy = proxy
    end

    def strip_quotes(arg)
      arg.strip.gsub(/^\"/, "").gsub(/\"$/, "")
    end

    # ####################
    # helper methods for type constructors from ML parser
    # ####################

    
    def pragma(key)
      fail "Unknown pragma keyword: #{key}" if(key !="FIXME")
    end

  end

class TypeAnnotationParser < Racc::Parser

module_eval(<<'...end annot_parser.racc/module_eval...', 'annot_parser.racc', 330)

...end annot_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    21,    14,    25,   132,    25,    97,   -18,    98,    21,
    10,    21,    77,    25,    33,    35,    34,    23,    86,    23,
    38,    99,    76,    24,    36,    24,    21,   100,    20,    95,
   -17,   -17,   -17,    24,    23,    30,    20,    21,    20,     9,
    37,    25,    33,    35,    34,    23,    21,    48,    38,   -14,
    62,    21,    36,    20,    23,    25,    33,    35,    34,    23,
    74,    24,    38,    30,    20,    44,    36,    48,    37,   106,
    93,    79,    45,    20,    46,    24,    94,    30,    20,    21,
    92,    78,    37,    25,    33,    35,    34,    23,   109,   110,
    38,    81,   125,    21,    36,    61,    60,    25,    33,    35,
    34,    23,   126,    24,    38,    30,    20,    21,    36,    24,
    37,    25,    33,    35,    34,    23,    58,    24,    38,    30,
    20,    21,    36,   115,    37,    25,    33,    35,    34,    23,
    56,    24,    38,    30,    20,    21,    36,    48,    37,    25,
    33,    35,    34,    23,    24,    24,    38,    30,    20,    21,
    36,    88,    37,    25,    33,    35,    34,    23,    80,    24,
    38,    30,    20,    21,    36,    85,    37,    25,    33,    35,
    34,    23,    84,    24,    38,    30,    20,    21,    36,   122,
    37,    25,    33,    35,    34,    23,   123,    24,    38,    30,
    20,    21,    36,   124,    37,    25,    33,    35,    34,    23,
    83,    24,    38,    30,    20,    21,    36,   127,    37,    25,
    33,    35,    34,    23,    48,    24,    38,    30,    20,    21,
    36,   109,    37,    25,    33,    35,    34,    23,    66,    24,
    38,    30,    20,   130,    36,    44,    37,   131,    96,    21,
    42,    66,    45,    24,    46,    30,    20,    23,    44,    68,
    37,    48,    66,    18,   134,    45,    48,    46,    17,    16,
    44,    44,    68,    21,    41,   138,    20,    45,    45,    46,
    46,    23,    44,    68,    21,   -16,   -16,   -16,   139,    45,
   140,    46,    23,    49,    50,    51,    48,    48,   143,    15,
    20,    48,   146,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20 ]

racc_action_check = [
     0,    23,     0,    14,   122,    13,    69,    52,    70,   139,
     0,    88,    40,   139,   139,   139,   139,   139,    52,    88,
   139,    72,    40,    14,   139,    13,    78,    73,    23,    67,
     0,     0,     0,   139,    78,   139,   139,   127,    88,     0,
   139,   127,   127,   127,   127,   127,    92,    77,   127,    39,
    33,    61,   127,    78,    92,    61,    61,    61,    61,    61,
    39,   127,    61,   127,   127,    80,    61,    79,   127,    80,
    65,    41,    80,    92,    80,    61,    66,    61,    61,    48,
    65,    41,    61,    48,    48,    48,    48,    48,    81,    82,
    48,    48,   106,     9,    48,    31,    28,     9,     9,     9,
     9,     9,   106,    48,     9,    48,    48,   100,     9,    25,
    48,   100,   100,   100,   100,   100,    24,     9,   100,     9,
     9,    38,   100,    91,     9,    38,    38,    38,    38,    38,
    15,   100,    38,   100,   100,    35,    38,    93,   100,    35,
    35,    35,    35,    35,    58,    38,    35,    38,    38,    34,
    35,    53,    38,    34,    34,    34,    34,    34,    42,    35,
    34,    35,    35,    96,    34,    51,    35,    96,    96,    96,
    96,    96,    50,    34,    96,    34,    34,    83,    96,   101,
    34,    83,    83,    83,    83,    83,   102,    96,    83,    96,
    96,    85,    83,   104,    96,    85,    85,    85,    85,    85,
    49,    83,    85,    83,    83,    84,    85,   108,    83,    84,
    84,    84,    84,    84,   109,    85,    84,    85,    85,    60,
    84,   110,    85,    60,    60,    60,    60,    60,    36,    84,
    60,    84,    84,   114,    60,    94,    84,   116,    68,   123,
    11,    98,    94,    60,    94,    60,    60,   123,    36,    36,
    60,    11,    97,     8,   124,    36,   125,    36,     7,     6,
    11,    98,    98,   126,    11,   128,   123,    11,    98,    11,
    98,   126,    97,    97,    76,    10,    10,    10,   129,    97,
   131,    97,    76,    12,    12,    12,   132,   134,   136,     1,
   126,   140,   143,   146,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    76 ]

racc_action_pointer = [
    -6,   289,   nil,   nil,   nil,   nil,   254,   253,   248,    78,
   239,   225,   247,   -14,   -16,   130,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -14,    97,    70,   nil,   nil,    92,   nil,
   nil,    67,   nil,    28,   134,   120,   213,   nil,   106,    44,
    -6,    53,   138,   nil,   nil,   nil,   nil,   nil,    64,   182,
   154,   147,     2,   123,   nil,   nil,   nil,   nil,   105,   nil,
   204,    36,   nil,   nil,   nil,    52,    56,    -2,   220,     4,
     6,   nil,    -6,    25,   nil,   nil,   259,    21,    11,    41,
    30,    56,    62,   162,   190,   176,   nil,   nil,    -4,   nil,
   nil,    94,    31,   111,   200,   nil,   148,   237,   226,   nil,
    92,   150,   184,   nil,   164,   nil,    74,   nil,   204,   188,
   189,   nil,   nil,   nil,   204,   nil,   208,   nil,   nil,   nil,
   nil,   nil,   -14,   224,   236,   230,   248,    22,   232,   275,
   nil,   262,   260,   nil,   261,   nil,   259,   nil,   nil,    -6,
   265,   nil,   nil,   274,   nil,   nil,   267,   nil ]

racc_action_default = [
   -13,   -77,    -1,    -2,    -3,    -4,   -77,   -77,   -77,   -77,
   -12,   -77,   -77,   -77,   -77,   -77,    -8,    -9,   -10,   -11,
   -42,   -43,   -44,   -77,   -46,   -77,   -49,   -50,   -51,   -53,
   -54,   -55,   -56,   -77,   -77,   -77,   -75,   -62,   -77,   -13,
   -77,   -77,   -77,   -28,   -29,   -30,   -31,   -32,   -77,   -77,
   -77,   -77,   -17,   -67,   -68,   -69,   148,   -45,   -77,   -48,
   -77,   -77,   -57,   -58,   -59,   -77,   -77,   -77,   -77,   -71,
   -72,   -76,   -77,   -64,   -12,   -15,   -77,   -77,   -77,   -77,
   -77,   -38,   -77,   -77,   -77,   -77,   -16,   -19,   -77,   -47,
   -52,   -77,   -77,   -77,   -77,   -60,   -77,   -77,   -77,   -63,
   -77,   -77,   -40,   -23,   -77,   -25,   -77,   -33,   -37,   -77,
   -38,    -5,    -6,    -7,   -77,   -61,   -77,   -21,   -70,   -73,
   -74,   -65,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -36,
   -66,   -77,   -77,   -41,   -77,   -26,   -77,   -34,   -39,   -77,
   -77,   -22,   -24,   -77,   -35,   -20,   -77,   -27 ]

racc_goto_table = [
    43,    19,    72,     7,   101,     6,   104,    59,    71,   108,
   107,   102,    82,   102,    63,    64,   114,    54,    55,     5,
   116,    53,    53,   102,   107,    91,     3,   102,     2,    40,
    57,    39,     8,    90,     4,    67,    52,     1,   129,   nil,
    89,   nil,   nil,   nil,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   133,   nil,   nil,   136,    87,   nil,   nil,   102,   nil,
   nil,   102,   nil,   nil,   121,   nil,   103,   nil,   105,   119,
   120,   nil,   nil,   nil,   nil,   111,   112,   113,   nil,   nil,
   nil,   nil,   117,   nil,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   135,   nil,   nil,   nil,   nil,   137,
   nil,   141,   nil,   142,   nil,   nil,   nil,   nil,   nil,   145,
   nil,   144,   nil,   nil,   nil,   147 ]

racc_goto_check = [
    17,     7,    20,     9,    16,     8,    16,    23,    31,    19,
    18,    21,    20,    21,    26,    26,    16,    29,    29,     5,
    16,    24,    24,    21,    18,    20,     3,    21,     2,    15,
    22,    12,    10,    25,     4,    28,     6,     1,    19,   nil,
    23,   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,    16,     9,   nil,   nil,    21,   nil,
   nil,    21,   nil,   nil,    20,   nil,    17,   nil,    17,    31,
    31,   nil,   nil,   nil,   nil,     7,     7,     7,   nil,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,     7,
   nil,    17,   nil,    17,   nil,   nil,   nil,   nil,   nil,    17,
   nil,     7,   nil,   nil,   nil,    17 ]

racc_goto_pointer = [
   nil,    37,    28,    26,    34,    19,    24,    -8,     5,     3,
    32,   nil,    20,   nil,   nil,    18,   -72,   -11,   -70,   -72,
   -36,   -65,     7,   -18,     8,   -27,   -20,   nil,    -1,     4,
   nil,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,
   nil,    11,   nil,    12,    70,    65,   nil,   nil,    47,   nil,
   nil,    29,    22,    26,    31,    27,    28,    32,   nil,   nil,
    69,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 48, :_reduce_1,
  1, 48, :_reduce_2,
  1, 48, :_reduce_3,
  1, 48, :_reduce_4,
  3, 53, :_reduce_5,
  3, 53, :_reduce_6,
  3, 53, :_reduce_7,
  2, 49, :_reduce_8,
  2, 50, :_reduce_9,
  2, 51, :_reduce_10,
  2, 52, :_reduce_11,
  1, 58, :_reduce_12,
  0, 58, :_reduce_13,
  2, 55, :_reduce_14,
  3, 55, :_reduce_15,
  1, 60, :_reduce_16,
  0, 60, :_reduce_17,
  2, 56, :_reduce_18,
  3, 56, :_reduce_19,
  6, 61, :_reduce_20,
  3, 61, :_reduce_21,
  6, 59, :_reduce_22,
  3, 59, :_reduce_23,
  6, 59, :_reduce_24,
  3, 59, :_reduce_25,
  5, 59, :_reduce_26,
  8, 59, :_reduce_27,
  1, 59, :_reduce_28,
  1, 65, :_reduce_29,
  1, 65, :_reduce_30,
  1, 65, :_reduce_31,
  1, 62, :_reduce_32,
  3, 62, :_reduce_33,
  5, 64, :_reduce_34,
  6, 64, :_reduce_35,
  4, 64, :_reduce_36,
  3, 64, :_reduce_37,
  0, 66, :_reduce_38,
  3, 66, :_reduce_39,
  1, 63, :_reduce_40,
  3, 63, :_reduce_41,
  1, 69, :_reduce_42,
  1, 69, :_reduce_43,
  1, 68, :_reduce_44,
  2, 68, :_reduce_45,
  1, 70, :_reduce_46,
  3, 70, :_reduce_47,
  2, 71, :_reduce_48,
  1, 71, :_reduce_49,
  1, 54, :_reduce_50,
  1, 72, :_reduce_51,
  3, 72, :_reduce_52,
  1, 73, :_reduce_53,
  1, 73, :_reduce_54,
  1, 73, :_reduce_55,
  1, 73, :_reduce_56,
  2, 73, :_reduce_57,
  2, 73, :_reduce_58,
  2, 73, :_reduce_59,
  3, 73, :_reduce_60,
  4, 73, :_reduce_61,
  1, 73, :_reduce_62,
  3, 74, :_reduce_63,
  1, 67, :_reduce_64,
  3, 67, :_reduce_65,
  4, 76, :_reduce_66,
  1, 76, :_reduce_67,
  2, 57, :_reduce_68,
  2, 57, :_reduce_69,
  3, 77, :_reduce_70,
  1, 78, :_reduce_71,
  1, 78, :_reduce_72,
  3, 78, :_reduce_73,
  3, 78, :_reduce_74,
  0, 75, :_reduce_75,
  1, 75, :_reduce_76 ]

racc_reduce_n = 77

racc_shift_n = 148

racc_token_table = {
  false => 0,
  :error => 1,
  :T_COMMA => 2,
  :T_RARROW => 3,
  :K_OR => 4,
  :T_EOF => 5,
  :K_CLASS => 6,
  :K_METACLASS => 7,
  :K_MODULE => 8,
  :K_INTERFACE => 9,
  :K_TYPE => 10,
  :K_TYPEVAR => 11,
  :K_ALIAS => 12,
  :K_REQUIRE => 13,
  :K_END => 14,
  :K_SELF => 15,
  :T_BEGIN_LINE => 16,
  :T_SEMICOLON => 17,
  :T_COLON => 18,
  :T_DOUBLE_COLON => 19,
  :T_DOT => 20,
  :T_STAR => 21,
  :T_QUESTION => 22,
  :T_CARROT => 23,
  :T_BANG => 24,
  :T_EQUAL => 25,
  :T_LPAREN => 26,
  :T_RPAREN => 27,
  :T_LESS => 28,
  :T_GREATER => 29,
  :T_LBRACKET => 30,
  :T_RBRACKET => 31,
  :T_LBRACE => 32,
  :T_RBRACE => 33,
  :T_SUBTYPE => 34,
  :T_STRING => 35,
  :T_IVAR => 36,
  :T_CVAR => 37,
  :T_GVAR => 38,
  :T_CONST_ID => 39,
  :T_TYPE_ID => 40,
  :T_SYMBOL => 41,
  :T_LOCAL_ID => 42,
  :T_TICKED_ID => 43,
  :T_SUFFIXED_ID => 44,
  :T_DOUBLE_HASH => 45,
  :K_NIL => 46 }

racc_nt_base = 47

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_COMMA",
  "T_RARROW",
  "K_OR",
  "T_EOF",
  "K_CLASS",
  "K_METACLASS",
  "K_MODULE",
  "K_INTERFACE",
  "K_TYPE",
  "K_TYPEVAR",
  "K_ALIAS",
  "K_REQUIRE",
  "K_END",
  "K_SELF",
  "T_BEGIN_LINE",
  "T_SEMICOLON",
  "T_COLON",
  "T_DOUBLE_COLON",
  "T_DOT",
  "T_STAR",
  "T_QUESTION",
  "T_CARROT",
  "T_BANG",
  "T_EQUAL",
  "T_LPAREN",
  "T_RPAREN",
  "T_LESS",
  "T_GREATER",
  "T_LBRACKET",
  "T_RBRACKET",
  "T_LBRACE",
  "T_RBRACE",
  "T_SUBTYPE",
  "T_STRING",
  "T_IVAR",
  "T_CVAR",
  "T_GVAR",
  "T_CONST_ID",
  "T_TYPE_ID",
  "T_SYMBOL",
  "T_LOCAL_ID",
  "T_TICKED_ID",
  "T_SUFFIXED_ID",
  "T_DOUBLE_HASH",
  "K_NIL",
  "$start",
  "entry",
  "e_method",
  "e_field",
  "e_class",
  "e_annotation",
  "field_sig",
  "type_expr",
  "method_annotation_list",
  "field_annotation_list",
  "class_annotation",
  "method_start",
  "const_method_type",
  "field_start",
  "method_type",
  "method_name",
  "type_id_list",
  "method_sig",
  "relative_method_name",
  "block",
  "type_expr_comma_list",
  "type_var",
  "simple_type_var",
  "type_ident_list",
  "type_ident",
  "or_type_list",
  "single_type_expr",
  "tuple",
  "field_or_method_list",
  "class_decl",
  "field_type",
  "field_or_method_nonempty_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'annot_parser.racc', 49)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 52)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 57)
  def _reduce_5(val, _values, result)
            result = handle_var(:ivar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 59)
  def _reduce_6(val, _values, result)
            result = handle_var(:cvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 61)
  def _reduce_7(val, _values, result)
            result = handle_var(:gvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 69)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 72)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 75)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 81)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 84)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 85)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 88)
  def _reduce_14(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 90)
  def _reduce_15(val, _values, result)
            result = [val[1]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 94)
  def _reduce_16(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 95)
  def _reduce_17(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 98)
  def _reduce_18(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 99)
  def _reduce_19(val, _values, result)
     result = [val[1]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 104)
  def _reduce_20(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 106)
  def _reduce_21(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 111)
  def _reduce_22(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 113)
  def _reduce_23(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 115)
  def _reduce_24(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 117)
  def _reduce_25(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 119)
  def _reduce_26(val, _values, result)
        	result = handle_mtype(ClassMethodIdentifier.new(val[2]), nil, val[4]) 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 122)
  def _reduce_27(val, _values, result)
     result = handle_mtype(ClassMethodIdentifier.new(val[2]), val[4], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 124)
  def _reduce_28(val, _values, result)
           result = handle_mtype(MethodIdentifier.new("__rtc_next_method"), nil, val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 129)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 131)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 133)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 136)
  def _reduce_32(val, _values, result)
     result = MethodIdentifier.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 137)
  def _reduce_33(val, _values, result)
     result = ClassMethodIdentifier.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 141)
  def _reduce_34(val, _values, result)
            result = construct_msig([], val[2], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 144)
  def _reduce_35(val, _values, result)
            result = construct_msig(val[1], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 147)
  def _reduce_36(val, _values, result)
        	result = construct_msig(val[1], val[3], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 150)
  def _reduce_37(val, _values, result)
            result = construct_msig([], val[2], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 155)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 156)
  def _reduce_39(val, _values, result)
     result = handle_btype(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 159)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 160)
  def _reduce_41(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 163)
  def _reduce_42(val, _values, result)
     result = handle_type_param(:id, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 164)
  def _reduce_43(val, _values, result)
     result = handle_type_param(:self, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 167)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 169)
  def _reduce_45(val, _values, result)
            result = handle_type_param(:varargs, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 173)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 175)
  def _reduce_47(val, _values, result)
          result = [val[0]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 180)
  def _reduce_48(val, _values, result)
       	  	result = {
   	  		:type => :absolute,
   	  		:name_list => val[1]
   	  	}
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 186)
  def _reduce_49(val, _values, result)
            result = {
        	:type => :relative,
        	:name_list => val[0]
        }
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 193)
  def _reduce_50(val, _values, result)
            list = val[0][:or_list]
        if(list.length > 1)
          result = Rtc::Types::UnionType.new(list)
        else
          # flatten if there is no union
          result = list[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 203)
  def _reduce_51(val, _values, result)
     result = {:or_list => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 205)
  def _reduce_52(val, _values, result)
            # need to differientiate OR lists from tuples (which are just arrays)
        val[2][:or_list] = [val[0]] + val[2][:or_list]
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 211)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 213)
  def _reduce_54(val, _values, result)
        	result = Rtc::Types::SymbolType.new(eval(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 216)
  def _reduce_55(val, _values, result)
            result = handle_type_ident(val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 218)
  def _reduce_56(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 220)
  def _reduce_57(val, _values, result)
            result = Rtc::Types::TopType.instance
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 223)
  def _reduce_58(val, _values, result)
            result = Rtc::Types::OptionalArg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 226)
  def _reduce_59(val, _values, result)
            result = Rtc::Types::Vararg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 229)
  def _reduce_60(val, _values, result)
            result = handle_structural_type(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 232)
  def _reduce_61(val, _values, result)
            nominal = handle_type_ident(val[0])
        result = Rtc::Types::ParameterizedType.new(nominal, val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 236)
  def _reduce_62(val, _values, result)
        	result = Rtc::Types::NominalType.of(NilClass)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 240)
  def _reduce_63(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 243)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 245)
  def _reduce_65(val, _values, result)
            result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 250)
  def _reduce_66(val, _values, result)
            id = val[0]
        type_vars = val[2]
        result = handle_class_decl(id, type_vars)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 255)
  def _reduce_67(val, _values, result)
            id = val[0]
        result = handle_class_decl(id)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 261)
  def _reduce_68(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 264)
  def _reduce_69(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 270)
  def _reduce_70(val, _values, result)
            result = handle_var(:ivar, val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 275)
  def _reduce_71(val, _values, result)
            result = {:fields => [val[0]], :methods => []}       
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 277)
  def _reduce_72(val, _values, result)
            result = {:fields => [],       :methods => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 279)
  def _reduce_73(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:fields] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 284)
  def _reduce_74(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:methods] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 290)
  def _reduce_75(val, _values, result)
     result = {:fields => [], :methods => []} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 291)
  def _reduce_76(val, _values, result)
     result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TypeAnnotationParser


end
