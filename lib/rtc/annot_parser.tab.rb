#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'rtc/annot_lexer.rex'
require 'rtc/parser'
require 'rtc/typing/types.rb'

module Rtc

  class TypeAnnotationParser < Racc::Parser

    attr_accessor :pos, :proxy

    # FIXME(rwsims): it's not clear what proxy is for, it's used when defining
    # class constants for doing class type signatures.
    def initialize(proxy)
        @proxy = proxy
    end

    def strip_quotes(arg)
      arg.strip.gsub(/^\"/, "").gsub(/\"$/, "")
    end

    # ####################
    # helper methods for type constructors from ML parser
    # ####################

    
    def pragma(key)
      fail "Unknown pragma keyword: #{key}" if(key !="FIXME")
    end

  end

class TypeAnnotationParser < Racc::Parser

module_eval(<<'...end annot_parser.racc/module_eval...', 'annot_parser.racc', 341)

...end annot_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    21,    14,    51,    25,    25,   102,   -14,   -18,    21,
    41,    34,    33,    10,   103,   104,    25,    35,    37,    36,
    23,    79,    91,    39,    24,    24,   105,    38,   -16,   -16,
   -16,    20,   106,   -17,   -17,   -17,    24,    70,    30,    20,
    70,    47,     9,    40,    21,    41,    34,    33,    48,    82,
    49,    25,    35,    37,    36,    23,   100,   101,    39,    81,
    47,    72,    38,    47,    72,    21,    21,    48,    70,    49,
    48,    24,    49,    30,    20,    98,    23,    23,    40,    21,
    41,    34,    33,    99,   133,    97,    25,    35,    37,    36,
    23,    47,    72,    39,   134,    20,    20,    38,    48,    21,
    49,    84,    51,    24,    45,   115,    24,   116,    30,    20,
    23,    83,    93,    40,    21,    41,    34,    33,    51,    90,
    89,    25,    35,    37,    36,    23,    88,    47,    39,    20,
   121,    44,    38,    85,    48,    21,    49,    52,    53,    54,
    51,    24,    21,    30,    20,    78,    23,    66,    40,    21,
    41,    34,    33,    23,    65,    64,    25,    35,    37,    36,
    23,   127,    24,    39,    47,    20,    21,    38,   112,    62,
   130,    48,    20,    49,   131,   132,    24,    23,    30,    20,
    60,   135,    51,    40,    21,    41,    34,    33,   115,   138,
   139,    25,    35,    37,    36,    23,    20,    59,    39,   141,
   142,    18,    38,   144,    51,    17,    16,   148,   149,   150,
   151,    24,    51,    30,    20,    51,   154,    15,    40,    21,
    41,    34,    33,    51,   157,    51,    25,    35,    37,    36,
    23,   nil,   nil,    39,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    30,    20,
   nil,   nil,   nil,    40,    21,    41,    34,    33,   nil,   nil,
   nil,    25,    35,    37,    36,    23,   nil,   nil,    39,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    30,    20,   nil,   nil,   nil,    40,    21,
    41,    34,    33,   nil,   nil,   nil,    25,    35,    37,    36,
    23,   nil,   nil,    39,    86,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    30,    20,
   nil,   nil,   nil,    40,    21,    41,    34,    33,   nil,   nil,
   nil,    25,    35,    37,    36,    23,   nil,   nil,    39,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    30,    20,   nil,   nil,   nil,    40,    21,
    41,    34,    33,   nil,   nil,   nil,    25,    35,    37,    36,
    23,   nil,   nil,    39,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    30,    20,
   nil,   nil,   nil,    40,    21,    41,    34,    33,   nil,   nil,
   nil,    25,    35,    37,    36,    23,   nil,   nil,    39,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    30,    20,   nil,   nil,   nil,    40,    21,
    41,    34,    33,   nil,   nil,   nil,    25,    35,    37,    36,
    23,   nil,   nil,    39,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    30,    20,
   nil,   nil,   nil,    40,    21,    41,    34,    33,   nil,   nil,
   nil,    25,    35,    37,    36,    23,   nil,   nil,    39,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    30,    20,   nil,   nil,   nil,    40,    21,
    41,    34,    33,   nil,   nil,   nil,    25,    35,    37,    36,
    23,   nil,   nil,    39,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    30,    20,
   nil,   nil,   nil,    40,    21,    41,    34,    33,   nil,   nil,
   nil,    25,    35,    37,    36,    23,   nil,   nil,    39,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    30,    20,   nil,   nil,   nil,    40 ]

racc_action_check = [
     0,    23,     0,    82,    13,    14,    73,    42,    55,   149,
   149,   149,   149,     0,    74,    76,   149,   149,   149,   149,
   149,    42,    55,   149,    13,    14,    77,   149,    10,    10,
    10,    23,    78,     0,     0,     0,   149,   102,   149,   149,
   103,    99,     0,   149,   135,   135,   135,   135,    99,    43,
    99,   135,   135,   135,   135,   135,    71,    72,   135,    43,
   102,   102,   135,   103,   103,   134,    83,   102,    38,   102,
   103,   135,   103,   135,   135,    69,   134,    83,   135,    65,
    65,    65,    65,    70,   112,    69,    65,    65,    65,    65,
    65,    38,    38,    65,   112,   134,    83,    65,    38,   131,
    38,    44,    84,    62,    11,    86,    65,    87,    65,    65,
   131,    44,    56,    65,    64,    64,    64,    64,    11,    54,
    53,    64,    64,    64,    64,    64,    52,    11,    64,   131,
    96,    11,    64,    45,    11,    93,    11,    12,    12,    12,
    98,    64,    97,    64,    64,    41,    93,    35,    64,     9,
     9,     9,     9,    97,    31,    28,     9,     9,     9,     9,
     9,   104,    25,     9,    85,    93,    81,     9,    85,    24,
   107,    85,    97,    85,   108,   110,     9,    81,     9,     9,
    19,   114,   115,     9,    88,    88,    88,    88,   116,   120,
   122,    88,    88,    88,    88,    88,    81,    15,    88,   129,
   130,     8,    88,   132,   133,     7,     6,   136,   137,   139,
   141,    88,   142,    88,    88,   144,   146,     1,    88,    89,
    89,    89,    89,   150,   154,   157,    89,    89,    89,    89,
    89,   nil,   nil,    89,   nil,   nil,   nil,    89,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    89,   nil,    89,    89,
   nil,   nil,   nil,    89,    90,    90,    90,    90,   nil,   nil,
   nil,    90,    90,    90,    90,    90,   nil,   nil,    90,   nil,
   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    90,   nil,    90,    90,   nil,   nil,   nil,    90,    51,
    51,    51,    51,   nil,   nil,   nil,    51,    51,    51,    51,
    51,   nil,   nil,    51,    51,   nil,   nil,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    51,   nil,    51,    51,
   nil,   nil,   nil,    51,    39,    39,    39,    39,   nil,   nil,
   nil,    39,    39,    39,    39,    39,   nil,   nil,    39,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,    39,    39,   nil,   nil,   nil,    39,   127,
   127,   127,   127,   nil,   nil,   nil,   127,   127,   127,   127,
   127,   nil,   nil,   127,   nil,   nil,   nil,   127,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   127,   127,
   nil,   nil,   nil,   127,   101,   101,   101,   101,   nil,   nil,
   nil,   101,   101,   101,   101,   101,   nil,   nil,   101,   nil,
   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   101,   nil,   101,   101,   nil,   nil,   nil,   101,    36,
    36,    36,    36,   nil,   nil,   nil,    36,    36,    36,    36,
    36,   nil,   nil,    36,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,    36,    36,
   nil,   nil,   nil,    36,   106,   106,   106,   106,   nil,   nil,
   nil,   106,   106,   106,   106,   106,   nil,   nil,   106,   nil,
   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   106,   nil,   106,   106,   nil,   nil,   nil,   106,   105,
   105,   105,   105,   nil,   nil,   nil,   105,   105,   105,   105,
   105,   nil,   nil,   105,   nil,   nil,   nil,   105,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   105,   nil,   105,   105,
   nil,   nil,   nil,   105,    37,    37,    37,    37,   nil,   nil,
   nil,    37,    37,    37,    37,    37,   nil,   nil,    37,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,    37,    37,   nil,   nil,   nil,    37 ]

racc_action_pointer = [
    -6,   217,   nil,   nil,   nil,   nil,   201,   200,   196,   134,
   -11,    89,    98,   -18,   -17,   197,   nil,   nil,   nil,   175,
   nil,   nil,   nil,   -14,   147,   120,   nil,   nil,   151,   nil,
   nil,   123,   nil,   nil,   nil,   122,   414,   519,    53,   309,
   nil,   114,     2,    28,    80,   110,   nil,   nil,   nil,   nil,
   nil,   274,   105,    99,    98,     3,    81,   nil,   nil,   nil,
   nil,   nil,    61,   nil,    99,    64,   nil,   nil,   nil,    54,
    60,    22,    36,     4,    12,   nil,   -15,    24,    -1,   nil,
   nil,   151,   -26,    51,    73,   126,    70,    77,   169,   204,
   239,   nil,   nil,   120,   nil,   nil,    98,   127,   111,     3,
   nil,   379,    22,    25,   158,   484,   449,   138,   172,   nil,
   143,   nil,    63,   nil,   178,   153,   153,   nil,   nil,   nil,
   157,   nil,   158,   nil,   nil,   nil,   nil,   344,   nil,   165,
   179,    84,   182,   175,    50,    29,   171,   205,   nil,   188,
   nil,   178,   183,   nil,   186,   nil,   184,   nil,   nil,    -6,
   194,   nil,   nil,   nil,   203,   nil,   nil,   196,   nil ]

racc_action_default = [
   -13,   -80,    -1,    -2,    -3,    -4,   -80,   -80,   -80,   -80,
   -12,   -80,   -80,   -80,   -80,   -80,    -8,    -9,   -10,   -80,
   -42,   -43,   -44,   -80,   -46,   -80,   -49,   -50,   -51,   -53,
   -54,   -55,   -56,   -57,   -58,   -80,   -80,   -80,   -78,   -80,
   -65,   -80,   -13,   -80,   -80,   -80,   -28,   -29,   -30,   -31,
   -32,   -80,   -80,   -80,   -80,   -17,   -70,   -71,   -72,   159,
   -11,   -45,   -80,   -48,   -80,   -80,   -59,   -60,   -61,   -80,
   -80,   -80,   -80,   -74,   -75,   -79,   -80,   -67,   -80,   -12,
   -15,   -80,   -80,   -80,   -80,   -80,   -38,   -80,   -80,   -80,
   -80,   -16,   -19,   -80,   -47,   -52,   -80,   -80,   -80,   -80,
   -62,   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -40,   -23,
   -80,   -25,   -80,   -33,   -37,   -80,   -38,    -5,    -6,    -7,
   -80,   -63,   -80,   -21,   -73,   -76,   -77,   -80,   -68,   -80,
   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -36,   -69,   -80,
   -64,   -80,   -80,   -41,   -80,   -26,   -80,   -34,   -39,   -80,
   -80,   -66,   -22,   -24,   -80,   -35,   -20,   -80,   -27 ]

racc_goto_table = [
    46,    19,    76,    67,    68,     7,   107,     6,   110,    63,
    75,   108,   114,   108,    87,   113,    57,    58,   120,    56,
    56,    55,   122,   108,     4,     3,    43,   108,    96,   113,
    61,    42,     8,    95,     2,    71,     5,     1,   nil,   nil,
   nil,   nil,   137,   nil,   nil,   nil,    94,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   146,
    92,   108,   nil,   nil,   108,   nil,   nil,   nil,   128,   129,
   nil,   109,   nil,   111,   125,   126,   nil,   nil,   nil,   nil,
   117,   118,   119,   nil,   nil,   nil,   nil,   123,   nil,   nil,
   nil,   nil,   nil,   124,   140,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   nil,   147,   nil,   nil,
   nil,   152,   nil,   153,   nil,   nil,   nil,   nil,   nil,   156,
   nil,   155,   nil,   nil,   nil,   nil,   158 ]

racc_goto_check = [
    17,     7,    20,    26,    26,     9,    16,     8,    16,    23,
    31,    21,    19,    21,    20,    18,    29,    29,    16,    24,
    24,     6,    16,    21,     4,     3,    15,    21,    20,    18,
    22,    12,    10,    25,     2,    28,     5,     1,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,    23,   nil,   nil,     8,
   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,    16,
     9,    21,   nil,   nil,    21,   nil,   nil,   nil,    20,    20,
   nil,    17,   nil,    17,    31,    31,   nil,   nil,   nil,   nil,
     7,     7,     7,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,   nil,   nil,     7,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,     7,   nil,   nil,
   nil,    17,   nil,    17,   nil,   nil,   nil,   nil,   nil,    17,
   nil,     7,   nil,   nil,   nil,   nil,    17 ]

racc_goto_pointer = [
   nil,    37,    34,    25,    24,    36,     9,    -8,     7,     5,
    32,   nil,    20,   nil,   nil,    15,   -75,   -11,   -70,   -74,
   -37,   -70,     7,   -16,     6,   -31,   -33,   nil,    -3,     3,
   nil,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,   nil,   nil,
   nil,    11,   nil,    12,    74,    69,   nil,   nil,    50,   nil,
   nil,    29,    22,    26,    31,    27,    28,    32,   nil,   nil,
    73,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 51, :_reduce_1,
  1, 51, :_reduce_2,
  1, 51, :_reduce_3,
  1, 51, :_reduce_4,
  3, 56, :_reduce_5,
  3, 56, :_reduce_6,
  3, 56, :_reduce_7,
  2, 52, :_reduce_8,
  2, 53, :_reduce_9,
  2, 54, :_reduce_10,
  3, 55, :_reduce_11,
  1, 61, :_reduce_12,
  0, 61, :_reduce_13,
  2, 58, :_reduce_14,
  3, 58, :_reduce_15,
  1, 63, :_reduce_16,
  0, 63, :_reduce_17,
  2, 59, :_reduce_18,
  3, 59, :_reduce_19,
  6, 64, :_reduce_20,
  3, 64, :_reduce_21,
  6, 62, :_reduce_22,
  3, 62, :_reduce_23,
  6, 62, :_reduce_24,
  3, 62, :_reduce_25,
  5, 62, :_reduce_26,
  8, 62, :_reduce_27,
  1, 62, :_reduce_28,
  1, 68, :_reduce_29,
  1, 68, :_reduce_30,
  1, 68, :_reduce_31,
  1, 65, :_reduce_32,
  3, 65, :_reduce_33,
  5, 67, :_reduce_34,
  6, 67, :_reduce_35,
  4, 67, :_reduce_36,
  3, 67, :_reduce_37,
  0, 69, :_reduce_38,
  3, 69, :_reduce_39,
  1, 66, :_reduce_40,
  3, 66, :_reduce_41,
  1, 72, :_reduce_42,
  1, 72, :_reduce_43,
  1, 71, :_reduce_44,
  2, 71, :_reduce_45,
  1, 73, :_reduce_46,
  3, 73, :_reduce_47,
  2, 74, :_reduce_48,
  1, 74, :_reduce_49,
  1, 57, :_reduce_50,
  1, 75, :_reduce_51,
  3, 75, :_reduce_52,
  1, 76, :_reduce_53,
  1, 76, :_reduce_54,
  1, 76, :_reduce_55,
  1, 76, :_reduce_56,
  1, 76, :_reduce_57,
  1, 76, :_reduce_58,
  2, 76, :_reduce_59,
  2, 76, :_reduce_60,
  2, 76, :_reduce_61,
  3, 76, :_reduce_62,
  4, 76, :_reduce_63,
  5, 76, :_reduce_64,
  1, 76, :_reduce_65,
  6, 77, :_reduce_66,
  1, 70, :_reduce_67,
  3, 70, :_reduce_68,
  4, 79, :_reduce_69,
  1, 79, :_reduce_70,
  2, 60, :_reduce_71,
  2, 60, :_reduce_72,
  3, 80, :_reduce_73,
  1, 81, :_reduce_74,
  1, 81, :_reduce_75,
  3, 81, :_reduce_76,
  3, 81, :_reduce_77,
  0, 78, :_reduce_78,
  1, 78, :_reduce_79 ]

racc_reduce_n = 80

racc_shift_n = 159

racc_token_table = {
  false => 0,
  :error => 1,
  :T_COMMA => 2,
  :T_RARROW => 3,
  :K_OR => 4,
  :T_EOF => 5,
  :K_CLASS => 6,
  :K_METACLASS => 7,
  :K_MODULE => 8,
  :K_INTERFACE => 9,
  :K_TYPE => 10,
  :K_TYPEVAR => 11,
  :K_ALIAS => 12,
  :K_REQUIRE => 13,
  :K_END => 14,
  :K_SELF => 15,
  :K_TUPLE => 16,
  :T_BOTTOM => 17,
  :T_TOP => 18,
  :T_BEGIN_LINE => 19,
  :T_SEMICOLON => 20,
  :T_COLON => 21,
  :T_DOUBLE_COLON => 22,
  :T_DOT => 23,
  :T_STAR => 24,
  :T_QUESTION => 25,
  :T_CARROT => 26,
  :T_BANG => 27,
  :T_EQUAL => 28,
  :T_LPAREN => 29,
  :T_RPAREN => 30,
  :T_LESS => 31,
  :T_GREATER => 32,
  :T_LBRACKET => 33,
  :T_RBRACKET => 34,
  :T_LBRACE => 35,
  :T_RBRACE => 36,
  :T_SUBTYPE => 37,
  :T_STRING => 38,
  :T_IVAR => 39,
  :T_CVAR => 40,
  :T_GVAR => 41,
  :T_CONST_ID => 42,
  :T_TYPE_ID => 43,
  :T_SYMBOL => 44,
  :T_LOCAL_ID => 45,
  :T_TICKED_ID => 46,
  :T_SUFFIXED_ID => 47,
  :T_DOUBLE_HASH => 48,
  :K_NIL => 49 }

racc_nt_base = 50

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_COMMA",
  "T_RARROW",
  "K_OR",
  "T_EOF",
  "K_CLASS",
  "K_METACLASS",
  "K_MODULE",
  "K_INTERFACE",
  "K_TYPE",
  "K_TYPEVAR",
  "K_ALIAS",
  "K_REQUIRE",
  "K_END",
  "K_SELF",
  "K_TUPLE",
  "T_BOTTOM",
  "T_TOP",
  "T_BEGIN_LINE",
  "T_SEMICOLON",
  "T_COLON",
  "T_DOUBLE_COLON",
  "T_DOT",
  "T_STAR",
  "T_QUESTION",
  "T_CARROT",
  "T_BANG",
  "T_EQUAL",
  "T_LPAREN",
  "T_RPAREN",
  "T_LESS",
  "T_GREATER",
  "T_LBRACKET",
  "T_RBRACKET",
  "T_LBRACE",
  "T_RBRACE",
  "T_SUBTYPE",
  "T_STRING",
  "T_IVAR",
  "T_CVAR",
  "T_GVAR",
  "T_CONST_ID",
  "T_TYPE_ID",
  "T_SYMBOL",
  "T_LOCAL_ID",
  "T_TICKED_ID",
  "T_SUFFIXED_ID",
  "T_DOUBLE_HASH",
  "K_NIL",
  "$start",
  "entry",
  "e_method",
  "e_field",
  "e_class",
  "e_annotation",
  "field_sig",
  "type_expr",
  "method_annotation_list",
  "field_annotation_list",
  "class_annotation",
  "method_start",
  "const_method_type",
  "field_start",
  "method_type",
  "method_name",
  "type_id_list",
  "method_sig",
  "relative_method_name",
  "block",
  "type_expr_comma_list",
  "type_var",
  "simple_type_var",
  "type_ident_list",
  "type_ident",
  "or_type_list",
  "single_type_expr",
  "tuple",
  "field_or_method_list",
  "class_decl",
  "field_type",
  "field_or_method_nonempty_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'annot_parser.racc', 49)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 52)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 57)
  def _reduce_5(val, _values, result)
            result = handle_var(:ivar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 59)
  def _reduce_6(val, _values, result)
            result = handle_var(:cvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 61)
  def _reduce_7(val, _values, result)
            result = handle_var(:gvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 69)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 72)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 75)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 78)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 81)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 82)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 85)
  def _reduce_14(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 87)
  def _reduce_15(val, _values, result)
            result = [val[1]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 91)
  def _reduce_16(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 92)
  def _reduce_17(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 95)
  def _reduce_18(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 96)
  def _reduce_19(val, _values, result)
     result = [val[1]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 101)
  def _reduce_20(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 103)
  def _reduce_21(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 108)
  def _reduce_22(val, _values, result)
     result = handle_mtype(val[0], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 110)
  def _reduce_23(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 112)
  def _reduce_24(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 114)
  def _reduce_25(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 116)
  def _reduce_26(val, _values, result)
        	result = handle_mtype(ClassMethodIdentifier.new(val[2]), nil, val[4]) 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 119)
  def _reduce_27(val, _values, result)
     result = handle_mtype(ClassMethodIdentifier.new(val[2]), val[4], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 121)
  def _reduce_28(val, _values, result)
           result = handle_mtype(MethodIdentifier.new("__rtc_next_method"), nil, val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 126)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 128)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 130)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 133)
  def _reduce_32(val, _values, result)
     result = MethodIdentifier.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 134)
  def _reduce_33(val, _values, result)
     result = ClassMethodIdentifier.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 138)
  def _reduce_34(val, _values, result)
            result = construct_msig([], val[2], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 141)
  def _reduce_35(val, _values, result)
            result = construct_msig(val[1], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 144)
  def _reduce_36(val, _values, result)
        	result = construct_msig(val[1], val[3], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 147)
  def _reduce_37(val, _values, result)
            result = construct_msig([], val[2], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 152)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 153)
  def _reduce_39(val, _values, result)
     result = handle_btype(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 156)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 157)
  def _reduce_41(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 160)
  def _reduce_42(val, _values, result)
     result = handle_type_param(:id, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 161)
  def _reduce_43(val, _values, result)
     result = handle_type_param(:self, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 164)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 166)
  def _reduce_45(val, _values, result)
            result = handle_type_param(:varargs, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 170)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 172)
  def _reduce_47(val, _values, result)
          result = [val[0]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 177)
  def _reduce_48(val, _values, result)
       	  	result = {
   	  		:type => :absolute,
   	  		:name_list => val[1]
   	  	}
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 183)
  def _reduce_49(val, _values, result)
            result = {
        	:type => :relative,
        	:name_list => val[0]
        }
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 191)
  def _reduce_50(val, _values, result)
            list = val[0][:or_list]
        if(list.length > 1)
          result = Rtc::Types::UnionType.new(list)
        else
          # flatten if there is no union
          result = list[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 201)
  def _reduce_51(val, _values, result)
     result = {:or_list => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 203)
  def _reduce_52(val, _values, result)
            # need to differientiate OR lists from tuples (which are just arrays)
        val[2][:or_list] = [val[0]] + val[2][:or_list]
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 209)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 211)
  def _reduce_54(val, _values, result)
        	result = Rtc::Types::SymbolType.new(eval(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 214)
  def _reduce_55(val, _values, result)
            result = handle_type_ident(val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 217)
  def _reduce_56(val, _values, result)
            result = val[0] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 220)
  def _reduce_57(val, _values, result)
            result = Rtc::Types::TopType.instance
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 223)
  def _reduce_58(val, _values, result)
        	result = Rtc::Types::BottomType.instance
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 226)
  def _reduce_59(val, _values, result)
            result = Rtc::Types::TopType.instance
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 229)
  def _reduce_60(val, _values, result)
            result = Rtc::Types::OptionalArg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 232)
  def _reduce_61(val, _values, result)
            result = Rtc::Types::Vararg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 235)
  def _reduce_62(val, _values, result)
            result = handle_structural_type(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 238)
  def _reduce_63(val, _values, result)
            nominal = handle_type_ident(val[0])
        result = Rtc::Types::ParameterizedType.new(nominal, val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 242)
  def _reduce_64(val, _values, result)
           result = Rtc::Types::ProceduralType.new(nil, val[4], val[1], nil)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 245)
  def _reduce_65(val, _values, result)
        	result = Rtc::Types::NominalType.of(NilClass)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 250)
  def _reduce_66(val, _values, result)
            result = Rtc::Types::TupleType.new(val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 254)
  def _reduce_67(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 256)
  def _reduce_68(val, _values, result)
            result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 261)
  def _reduce_69(val, _values, result)
            id = val[0]
        type_vars = val[2]
        result = handle_class_decl(id, type_vars)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 266)
  def _reduce_70(val, _values, result)
            id = val[0]
        result = handle_class_decl(id)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 272)
  def _reduce_71(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 275)
  def _reduce_72(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 281)
  def _reduce_73(val, _values, result)
            result = handle_var(:ivar, val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 286)
  def _reduce_74(val, _values, result)
            result = {:fields => [val[0]], :methods => []}       
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 288)
  def _reduce_75(val, _values, result)
            result = {:fields => [],       :methods => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 290)
  def _reduce_76(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:fields] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 295)
  def _reduce_77(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:methods] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 301)
  def _reduce_78(val, _values, result)
     result = {:fields => [], :methods => []} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 302)
  def _reduce_79(val, _values, result)
     result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TypeAnnotationParser


end
