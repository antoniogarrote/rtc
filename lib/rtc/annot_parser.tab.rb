#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'rtc/annot_lexer.rex'
require 'rtc/parser'
require 'rtc/typing/types.rb'

module Rtc

  class TypeAnnotationParser < Racc::Parser

    attr_accessor :pos, :proxy

    # FIXME(rwsims): it's not clear what proxy is for, it's used when defining
    # class constants for doing class type signatures.
    def initialize(proxy)
        @proxy = proxy
    end

    def strip_quotes(arg)
      arg.strip.gsub(/^\"/, "").gsub(/\"$/, "")
    end

    # ####################
    # helper methods for type constructors from ML parser
    # ####################

    
    def pragma(key)
      fail "Unknown pragma keyword: #{key}" if(key !="FIXME")
    end

  end

class TypeAnnotationParser < Racc::Parser

module_eval(<<'...end annot_parser.racc/module_eval...', 'annot_parser.racc', 329)

...end annot_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    54,    14,    21,   129,    21,    90,    21,    89,    54,
    10,    54,    49,    21,    63,    65,    64,    56,   -18,    56,
    68,    51,    48,    20,    66,    20,    54,    20,    53,    73,
   -17,   -17,   -17,    20,    56,    60,    53,    54,    53,     9,
    67,    21,    63,    65,    64,    56,   102,    87,    68,   -14,
    86,    54,    66,    53,    32,    21,    63,    65,    64,    56,
    44,    20,    68,    60,    53,    54,    66,    32,    67,    21,
    63,    65,    64,    56,   107,    20,    68,    60,    53,    54,
    66,   108,    67,    21,    63,    65,    64,    56,   109,    20,
    68,    60,    53,    54,    66,   110,    67,    21,    63,    65,
    64,    56,    20,    20,    68,    60,    53,    54,    66,   113,
    67,    21,    63,    65,    64,    56,    32,    20,    68,    60,
    53,    54,    66,    86,    67,    21,    63,    65,    64,    56,
    75,    20,    68,    60,    53,    54,    66,    72,    67,    21,
    63,    65,    64,    56,    71,    20,    68,    60,    53,    54,
    66,   120,    67,    21,    63,    65,    64,    56,   121,    20,
    68,    60,    53,    54,    66,   122,    67,    21,    63,    65,
    64,    56,   123,    20,    68,    60,    53,    54,    66,   124,
    67,    21,    63,    65,    64,    56,   125,    20,    68,    60,
    53,    54,    66,    70,    67,    21,    63,    65,    64,    56,
   127,    20,    68,    60,    53,    54,    66,   128,    67,    21,
    63,    65,    64,    56,    95,    20,    68,    60,    53,    95,
    66,    28,    67,    91,    95,    54,    50,   119,    29,    20,
    30,    60,    53,    56,    28,    97,    67,   118,    26,    28,
    97,    29,    54,    30,    28,    97,    29,    54,    30,    32,
    56,    29,    53,    30,   131,    56,    54,    32,    28,    28,
    47,   111,    25,    83,    56,    29,    29,    30,    30,    53,
    46,   112,    20,    42,    53,    33,    34,    35,   -16,   -16,
   -16,   135,   136,    53,   137,    41,    32,    40,    18,    17,
    16,    32,    32,   145,    15,   147,   148,   149,    32,    32 ]

racc_action_check = [
     0,    56,     0,     9,   108,    13,    61,    14,    58,    32,
     0,   118,    25,    32,    32,    32,    32,    32,    36,   118,
    32,    32,    25,     9,    32,    13,   112,    14,    56,    36,
     0,     0,     0,    32,   112,    32,    32,    64,   118,     0,
    32,    64,    64,    64,    64,    64,    69,    52,    64,    23,
    51,    65,    64,   112,    49,    65,    65,    65,    65,    65,
    23,    64,    65,    64,    64,   122,    65,    47,    64,   122,
   122,   122,   122,   122,    76,    65,   122,    65,    65,    68,
   122,    78,    65,    68,    68,    68,    68,    68,    79,   122,
    68,   122,   122,    70,    68,    81,   122,    70,    70,    70,
    70,    70,    42,    68,    70,    68,    68,    71,    70,    85,
    68,    71,    71,    71,    71,    71,    86,    70,    71,    70,
    70,    72,    71,    87,    70,    72,    72,    72,    72,    72,
    37,    71,    72,    71,    71,    41,    72,    35,    71,    41,
    41,    41,    41,    41,    34,    72,    41,    72,    72,    89,
    41,    95,    72,    89,    89,    89,    89,    89,    96,    41,
    89,    41,    41,    90,    89,    97,    41,    90,    90,    90,
    90,    90,    98,    89,    90,    89,    89,   136,    90,    99,
    89,   136,   136,   136,   136,   136,   101,    90,   136,    90,
    90,   113,   136,    33,    90,   113,   113,   113,   113,   113,
   106,   136,   113,   136,   136,   102,   113,   107,   136,   102,
   102,   102,   102,   102,   124,   113,   102,   113,   113,   123,
   102,   120,   113,    63,    66,   109,    26,    94,   120,   102,
   120,   102,   102,   109,   124,   124,   102,    94,    11,   123,
   123,   124,    48,   124,    66,    66,   123,    75,   123,    11,
    48,    66,   109,    66,   110,    75,    46,   111,    11,    50,
    24,    83,    11,    50,    46,    11,    50,    11,    50,    48,
    24,    83,    21,    20,    75,    12,    12,    12,    10,    10,
    10,   114,   115,    46,   117,    19,   119,    15,     8,     7,
     6,   129,   131,   133,     1,   138,   145,   147,   148,   149 ]

racc_action_pointer = [
    -6,   294,   nil,   nil,   nil,   nil,   285,   284,   283,   -16,
   242,   223,   239,   -14,   -12,   287,   nil,   nil,   nil,   257,
   254,   233,   nil,    44,   242,    -6,   206,   nil,   nil,   nil,
   nil,   nil,    -6,   175,   126,   119,    13,   102,   nil,   nil,
   nil,   120,    63,   nil,   nil,   nil,   241,    41,   227,    28,
   224,    18,    20,   nil,   nil,   nil,   -14,   nil,     4,   nil,
   nil,   -22,   nil,   201,    22,    36,   209,   nil,    64,    44,
    78,    92,   106,   nil,   nil,   232,    45,   nil,    52,    86,
   nil,    66,   nil,   243,   nil,   106,    90,    91,   nil,   134,
   148,   nil,   nil,   nil,   209,   131,   127,   147,   170,   177,
   nil,   159,   190,   nil,   nil,   nil,   171,   202,   -14,   210,
   236,   231,    11,   176,   248,   279,   nil,   255,    -4,   260,
   186,   nil,    50,   204,   199,   nil,   nil,   nil,   nil,   265,
   nil,   266,   nil,   264,   nil,   nil,   162,   nil,   266,   nil,
   nil,   nil,   nil,   nil,   nil,   278,   nil,   279,   272,   273,
   nil,   nil ]

racc_action_default = [
   -13,   -77,    -1,    -2,    -3,    -4,   -77,   -77,   -77,   -77,
   -12,   -77,   -77,   -77,   -77,   -77,    -8,    -9,   -10,   -77,
   -46,   -77,   -49,   -13,   -77,   -77,   -77,   -28,   -29,   -30,
   -31,   -32,   -77,   -77,   -77,   -77,   -17,   -67,   -68,   -69,
   152,   -77,   -77,   -48,   -12,   -15,   -77,   -77,   -77,   -77,
   -77,   -38,   -77,   -42,   -43,   -44,   -77,   -50,   -51,   -53,
   -54,   -55,   -56,   -77,   -77,   -77,   -75,   -62,   -77,   -64,
   -77,   -77,   -77,   -16,   -19,   -77,   -77,   -47,   -77,   -40,
   -23,   -77,   -25,   -77,   -33,   -37,   -77,   -38,   -45,   -77,
   -77,   -57,   -58,   -59,   -77,   -77,   -77,   -77,   -71,   -72,
   -76,   -77,   -77,    -5,    -6,    -7,   -77,   -77,   -77,   -77,
   -77,   -77,   -77,   -77,   -77,   -36,   -52,   -77,   -77,   -77,
   -77,   -60,   -77,   -77,   -77,   -63,   -65,   -66,   -11,   -77,
   -41,   -77,   -26,   -77,   -34,   -39,   -77,   -61,   -77,   -21,
   -70,   -73,   -74,   -22,   -24,   -77,   -35,   -77,   -77,   -77,
   -27,   -20 ]

racc_goto_table = [
    27,    78,    79,    81,    79,    85,    84,     7,    52,     6,
    24,   103,   104,   105,   100,    19,    43,    76,    23,    37,
    37,    92,    93,    38,    39,     8,    36,     5,    88,     4,
   106,    79,    45,   116,     3,    96,    80,    77,    82,     2,
     1,   115,   nil,    74,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   140,   130,    79,   117,   133,    79,   nil,
   nil,   141,   142,   138,    79,   114,    84,   146,   126,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,
   144,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,   151 ]

racc_goto_check = [
    19,    18,    22,    18,    22,    21,    20,     9,    12,     8,
    17,     7,     7,     7,    31,    11,    24,    12,    14,    11,
    11,    26,    26,    29,    29,    10,     6,     5,    23,     4,
    18,    22,     8,    25,     3,    28,    19,    24,    19,     2,
     1,    21,   nil,     9,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     7,    18,    22,    12,    18,    22,   nil,
   nil,    31,    31,    18,    22,    19,    20,     7,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,    19 ]

racc_goto_pointer = [
   nil,    40,    39,    34,    29,    27,    14,   -59,     9,     7,
    25,     6,   -24,   nil,     7,   nil,   nil,    -1,   -45,   -11,
   -44,   -46,   -44,   -28,    -5,   -56,   -43,   nil,   -31,    10,
   nil,   -52 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,   nil,   nil,
   nil,    61,   nil,    11,   nil,    12,    99,    94,   nil,   nil,
    31,   nil,    59,    55,    22,    57,    58,    62,   nil,   nil,
    98,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 48, :_reduce_1,
  1, 48, :_reduce_2,
  1, 48, :_reduce_3,
  1, 48, :_reduce_4,
  3, 53, :_reduce_5,
  3, 53, :_reduce_6,
  3, 53, :_reduce_7,
  2, 49, :_reduce_8,
  2, 50, :_reduce_9,
  2, 51, :_reduce_10,
  6, 52, :_reduce_11,
  1, 60, :_reduce_12,
  0, 60, :_reduce_13,
  2, 55, :_reduce_14,
  3, 55, :_reduce_15,
  1, 62, :_reduce_16,
  0, 62, :_reduce_17,
  2, 56, :_reduce_18,
  3, 56, :_reduce_19,
  6, 63, :_reduce_20,
  3, 63, :_reduce_21,
  6, 61, :_reduce_22,
  3, 61, :_reduce_23,
  6, 61, :_reduce_24,
  3, 61, :_reduce_25,
  5, 61, :_reduce_26,
  8, 61, :_reduce_27,
  1, 61, :_reduce_28,
  1, 67, :_reduce_29,
  1, 67, :_reduce_30,
  1, 67, :_reduce_31,
  1, 64, :_reduce_32,
  3, 64, :_reduce_33,
  5, 66, :_reduce_34,
  6, 66, :_reduce_35,
  4, 66, :_reduce_36,
  3, 66, :_reduce_37,
  0, 68, :_reduce_38,
  3, 68, :_reduce_39,
  1, 65, :_reduce_40,
  3, 65, :_reduce_41,
  1, 70, :_reduce_42,
  1, 70, :_reduce_43,
  1, 69, :_reduce_44,
  2, 69, :_reduce_45,
  1, 71, :_reduce_46,
  3, 71, :_reduce_47,
  2, 58, :_reduce_48,
  1, 58, :_reduce_49,
  1, 54, :_reduce_50,
  1, 72, :_reduce_51,
  3, 72, :_reduce_52,
  1, 73, :_reduce_53,
  1, 73, :_reduce_54,
  1, 73, :_reduce_55,
  1, 73, :_reduce_56,
  2, 73, :_reduce_57,
  2, 73, :_reduce_58,
  2, 73, :_reduce_59,
  3, 73, :_reduce_60,
  4, 73, :_reduce_61,
  1, 73, :_reduce_62,
  3, 74, :_reduce_63,
  1, 59, :_reduce_64,
  3, 59, :_reduce_65,
  4, 76, :_reduce_66,
  1, 76, :_reduce_67,
  2, 57, :_reduce_68,
  2, 57, :_reduce_69,
  3, 77, :_reduce_70,
  1, 78, :_reduce_71,
  1, 78, :_reduce_72,
  3, 78, :_reduce_73,
  3, 78, :_reduce_74,
  0, 75, :_reduce_75,
  1, 75, :_reduce_76 ]

racc_reduce_n = 77

racc_shift_n = 152

racc_token_table = {
  false => 0,
  :error => 1,
  :T_COMMA => 2,
  :T_RARROW => 3,
  :K_OR => 4,
  :T_EOF => 5,
  :K_CLASS => 6,
  :K_METACLASS => 7,
  :K_MODULE => 8,
  :K_INTERFACE => 9,
  :K_TYPE => 10,
  :K_TYPEVAR => 11,
  :K_ALIAS => 12,
  :K_REQUIRE => 13,
  :K_END => 14,
  :K_SELF => 15,
  :T_BEGIN_LINE => 16,
  :T_SEMICOLON => 17,
  :T_COLON => 18,
  :T_DOUBLE_COLON => 19,
  :T_DOT => 20,
  :T_STAR => 21,
  :T_QUESTION => 22,
  :T_CARROT => 23,
  :T_BANG => 24,
  :T_EQUAL => 25,
  :T_LPAREN => 26,
  :T_RPAREN => 27,
  :T_LESS => 28,
  :T_GREATER => 29,
  :T_LBRACKET => 30,
  :T_RBRACKET => 31,
  :T_LBRACE => 32,
  :T_RBRACE => 33,
  :T_SUBTYPE => 34,
  :T_STRING => 35,
  :T_IVAR => 36,
  :T_CVAR => 37,
  :T_GVAR => 38,
  :T_CONST_ID => 39,
  :T_TYPE_ID => 40,
  :T_SYMBOL => 41,
  :T_LOCAL_ID => 42,
  :T_TICKED_ID => 43,
  :T_SUFFIXED_ID => 44,
  :T_DOUBLE_HASH => 45,
  :K_NIL => 46 }

racc_nt_base = 47

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_COMMA",
  "T_RARROW",
  "K_OR",
  "T_EOF",
  "K_CLASS",
  "K_METACLASS",
  "K_MODULE",
  "K_INTERFACE",
  "K_TYPE",
  "K_TYPEVAR",
  "K_ALIAS",
  "K_REQUIRE",
  "K_END",
  "K_SELF",
  "T_BEGIN_LINE",
  "T_SEMICOLON",
  "T_COLON",
  "T_DOUBLE_COLON",
  "T_DOT",
  "T_STAR",
  "T_QUESTION",
  "T_CARROT",
  "T_BANG",
  "T_EQUAL",
  "T_LPAREN",
  "T_RPAREN",
  "T_LESS",
  "T_GREATER",
  "T_LBRACKET",
  "T_RBRACKET",
  "T_LBRACE",
  "T_RBRACE",
  "T_SUBTYPE",
  "T_STRING",
  "T_IVAR",
  "T_CVAR",
  "T_GVAR",
  "T_CONST_ID",
  "T_TYPE_ID",
  "T_SYMBOL",
  "T_LOCAL_ID",
  "T_TICKED_ID",
  "T_SUFFIXED_ID",
  "T_DOUBLE_HASH",
  "K_NIL",
  "$start",
  "entry",
  "e_method",
  "e_field",
  "e_class",
  "e_annotation",
  "field_sig",
  "type_expr",
  "method_annotation_list",
  "field_annotation_list",
  "class_annotation",
  "type_ident",
  "type_expr_comma_list",
  "method_start",
  "const_method_type",
  "field_start",
  "method_type",
  "method_name",
  "type_id_list",
  "method_sig",
  "relative_method_name",
  "block",
  "type_var",
  "simple_type_var",
  "type_ident_list",
  "or_type_list",
  "single_type_expr",
  "tuple",
  "field_or_method_list",
  "class_decl",
  "field_type",
  "field_or_method_nonempty_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'annot_parser.racc', 49)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 52)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 57)
  def _reduce_5(val, _values, result)
            result = handle_var(:ivar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 59)
  def _reduce_6(val, _values, result)
            result = handle_var(:cvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 61)
  def _reduce_7(val, _values, result)
            result = handle_var(:gvar, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 69)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 72)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 75)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 79)
  def _reduce_11(val, _values, result)
      	  	result = Rtc::Types::ParameterizedType.new(handle_type_ident(val[1]), val[3])
  	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 83)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 84)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 87)
  def _reduce_14(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 89)
  def _reduce_15(val, _values, result)
            result = [val[1]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 93)
  def _reduce_16(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 94)
  def _reduce_17(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 97)
  def _reduce_18(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 98)
  def _reduce_19(val, _values, result)
     result = [val[1]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 103)
  def _reduce_20(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 105)
  def _reduce_21(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 110)
  def _reduce_22(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 112)
  def _reduce_23(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 114)
  def _reduce_24(val, _values, result)
     result = handle_mtype(val[0], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 116)
  def _reduce_25(val, _values, result)
     result = handle_mtype(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 118)
  def _reduce_26(val, _values, result)
        	result = handle_mtype(ClassMethodIdentifier.new(val[2]), nil, val[4]) 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 121)
  def _reduce_27(val, _values, result)
     result = handle_mtype(ClassMethodIdentifier.new(val[2]), val[4], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 123)
  def _reduce_28(val, _values, result)
           result = handle_mtype(MethodIdentifier.new("__rtc_next_method"), nil, val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 128)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 130)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 132)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 135)
  def _reduce_32(val, _values, result)
     result = MethodIdentifier.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 136)
  def _reduce_33(val, _values, result)
     result = ClassMethodIdentifier.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 140)
  def _reduce_34(val, _values, result)
            result = construct_msig([], val[2], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 143)
  def _reduce_35(val, _values, result)
            result = construct_msig(val[1], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 146)
  def _reduce_36(val, _values, result)
        	result = construct_msig(val[1], val[3], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 149)
  def _reduce_37(val, _values, result)
            result = construct_msig([], val[2], Rtc::Types::TopType.instance)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 154)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 155)
  def _reduce_39(val, _values, result)
     result = handle_btype(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 158)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 159)
  def _reduce_41(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 162)
  def _reduce_42(val, _values, result)
     result = handle_type_param(:id, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 163)
  def _reduce_43(val, _values, result)
     result = handle_type_param(:self, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 166)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 168)
  def _reduce_45(val, _values, result)
            result = handle_type_param(:varargs, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 172)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 174)
  def _reduce_47(val, _values, result)
          result = [val[0]] + val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 179)
  def _reduce_48(val, _values, result)
       	  	result = {
   	  		:type => :absolute,
   	  		:name_list => val[1]
   	  	}
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 185)
  def _reduce_49(val, _values, result)
            result = {
        	:type => :relative,
        	:name_list => val[0]
        }
   	  
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 192)
  def _reduce_50(val, _values, result)
            list = val[0][:or_list]
        if(list.length > 1)
          result = Rtc::Types::UnionType.new(list)
        else
          # flatten if there is no union
          result = list[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 202)
  def _reduce_51(val, _values, result)
     result = {:or_list => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 204)
  def _reduce_52(val, _values, result)
            # need to differientiate OR lists from tuples (which are just arrays)
        val[2][:or_list] = [val[0]] + val[2][:or_list]
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 210)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 212)
  def _reduce_54(val, _values, result)
        	result = Rtc::Types::SymbolType.new(eval(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 215)
  def _reduce_55(val, _values, result)
            result = handle_type_ident(val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 217)
  def _reduce_56(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 219)
  def _reduce_57(val, _values, result)
            result = Rtc::Types::TopType.instance
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 222)
  def _reduce_58(val, _values, result)
            result = Rtc::Types::OptionalArg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 225)
  def _reduce_59(val, _values, result)
            result = Rtc::Types::Vararg.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 228)
  def _reduce_60(val, _values, result)
            result = handle_structural_type(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 231)
  def _reduce_61(val, _values, result)
            nominal = handle_type_ident(val[0])
        result = Rtc::Types::ParameterizedType.new(nominal, val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 235)
  def _reduce_62(val, _values, result)
        	result = Rtc::Types::NominalType.of(NilClass)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 239)
  def _reduce_63(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 242)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 244)
  def _reduce_65(val, _values, result)
            result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 249)
  def _reduce_66(val, _values, result)
            id = val[0]
        type_vars = val[2]
        result = handle_class_decl(id, type_vars)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 254)
  def _reduce_67(val, _values, result)
            id = val[0]
        result = handle_class_decl(id)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 260)
  def _reduce_68(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 263)
  def _reduce_69(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 269)
  def _reduce_70(val, _values, result)
            result = handle_var(:ivar, val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 274)
  def _reduce_71(val, _values, result)
            result = {:fields => [val[0]], :methods => []}       
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 276)
  def _reduce_72(val, _values, result)
            result = {:fields => [],       :methods => [val[0]]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 278)
  def _reduce_73(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:fields] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 283)
  def _reduce_74(val, _values, result)
            field_method_hash = val[2]
        field_method_hash[:methods] += [val[0]]
        result = field_method_hash
      
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 289)
  def _reduce_75(val, _values, result)
     result = {:fields => [], :methods => []} 
    result
  end
.,.,

module_eval(<<'.,.,', 'annot_parser.racc', 290)
  def _reduce_76(val, _values, result)
     result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TypeAnnotationParser


end
