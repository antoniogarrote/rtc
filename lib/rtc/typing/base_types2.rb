class Object
  rtc_annotated

  typesig("'!~' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'<=>' : (Object) -> %bool or NilClass", {'unwrap'=>[0]})
  typesig("'==' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'===' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'=~' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("__id__ : () -> Fixnum")
  typesig("__send__ : (Symbol or String, *.?) -> .?", {'unwrap'=>[0, 1]})
  typesig("'class' : () -> Class")
  typesig("clone<self> : () -> self", {'unwrap'=>[0]})
  # typesig("display : (?BaseIO) -> NilClass")    
  # typesig("dup<self> : () -> self")             # c                                    
  typesig("'eql?' : (Object) -> %bool", {'unwrap'=>[0]})
#  typesig("'equal?' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'equal?' : (%bool) -> %bool", {'unwrap'=>[0]})
  typesig("extend<self> : (*Module) -> self", {'unwrap'=>[0]})
  typesig("freeze<self> : () -> self")
  typesig("'frozen?' : () -> %bool")
  typesig("hash : () -> Fixnum")
  typesig("initialize : () -> []")
  typesig("inspect : () -> String")
  typesig("'instance_of?' : (Module) -> %bool", {'unwrap'=>[0]})
  typesig("'instance_variable_defined?' : (Symbol or String) -> %bool", {'unwrap'=>[0]})
  typesig("instance_variable_get : (Symbol or String) -> .?", {'unwrap'=>[0]})
  typesig("instance_variable_set : (Symbol or String, .?) -> .?", {'unwrap'=>[0,1]})
  typesig("instance_variables : () -> Array")
  typesig("'is_a?' : (Module) -> %bool", {'unwrap'=>[0]})
  typesig("'kind_of?' : (Module) -> %bool", {'unwrap'=>[0]})
  typesig("method : (Symbol or String) -> Method", {'unwrap'=>[0]})
  typesig("methods : () -> Array<String>")
  typesig("'nil?' : () -> %bool")
  typesig("object_id : () -> Fixnum")
  typesig("private_methods : (?%bool) -> Array<String>", {'unwrap'=>[0]})
  typesig("protected_methods : (?%bool) -> Array<String>", {'unwrap'=>[0]})
  typesig("public_methods : (?%bool) -> Array<String>", {'unwrap'=>[0]})
  typesig("'respond_to?' : (Symbol or String, ?%bool) -> %bool", {'unwrap'=>[0,1]})
  typesig("send : (Symbol or String, *.?) -> .?", {'unwrap'=>[0,1]})
  typesig("singleton_methods : (?%bool) -> Array<String>", {'unwrap'=>[0]})
  typesig("taint<self> : () -> self")
  typesig("'tainted?' : () -> %bool")
  ## MikeF: This method is deprecated (Ruby gives a runtime warning), 
  ## so I suggest we not include it for now.  Also, it is important that 
  ## Ruby classes implement this themselves whenever they are used in for 
  ## loops or parallel assignment 
  # #% to_a : () -> Array<Object> 
  # def to_a() end    

  typesig("to_s : () -> String")
  # typesig("type : () -> Class")      # c
  typesig("untaint<self> : () -> self")
end

class Numeric2
  rtc_annotated

  typesig("'^' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'%' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'&' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'*' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'**' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'+' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'+@' : () -> Numeric")
  typesig("'-' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'-@' : () -> Numeric")
  typesig("'/' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'<' : (Numeric) -> %bool", {'unwrap'=>[0]})
  typesig("'<<' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'<=' : (Numeric) -> %bool", {'unwrap'=>[0]})
  typesig("'<=>' : (Numeric) -> Fixnum", {'unwrap'=>[0]})
  typesig("'==' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'>' : (Numeric) -> %bool", {'unwrap'=>[0]})
  typesig("'>=' : (Numeric) -> %bool", {'unwrap'=>[0]})
  typesig("'>>' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'[]' : (Numeric) -> Fixnum", {'unwrap'=>[0]})
  typesig("'^' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("abs : () -> Numeric")
  typesig("'between?': (Numeric, Numeric) -> %bool", {'unwrap'=>[0,1]})
  typesig("ceil : () -> Numeric")
  typesig("chr : () -> String")
  typesig("coerce : (Numeric) -> Array<Numeric>", {'unwrap'=>[0]})
  typesig("denominator : () -> Fixnum")
  typesig("div : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("divmod : (Numeric) -> Array", {'unwrap'=>[0]})
  typesig("downto<t> : (Numeric) {(Numeric) -> t} -> Numeric", {'unwrap'=>[0]})
  typesig("'eql?' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'finite?' : () -> %bool", {'unwrap'=>[0]})
  typesig("floor : () -> Numeric")
  typesig("gcd : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("gcdlcm : (Numeric) -> Array<Numeric>", {'unwrap'=>[0]})
  typesig("hash : () -> Fixnum")
  typesig("id2name : () -> Fixnum")
  typesig("'infinite?' : () -> %bool")
  typesig("'integer?' : () -> %bool")
  typesig("lcm : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("modulo : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'nan?' : () -> %bool")
  typesig("next : () -> Numeric")
  typesig("'nonzero?' : () -> %bool")
  typesig("numerator : () -> Fixnum")
  typesig("'power!' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("quo : (Numeric) -> Float", {'unwrap'=>[0]})
  typesig("rdiv : (Numeric) -> Float", {'unwrap'=>[0]})
  typesig("remainder : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("round : () -> Numeric")
  typesig("rpower : (Numeric) -> Numeric", {'unwrap'=>[0]})
  #typesig("singleton_method_added : !FIXME -> !FIXME")
  typesig("step<t> : (Numeric, Numeric) {(Numeric) -> t} -> Numeric", {'unwrap'=>[0,1]})
  typesig("succ : () -> Numeric")
  typesig("times<t> : () {(Integer) -> t} -> Integer")
  typesig("to_f : () -> Float")
  typesig("to_i : () -> Fixnum")
  typesig("to_r : () -> Rational")
  typesig("to_int : () -> Integer")
  typesig("to_sym : () -> Symbol")
  typesig("truncate : () -> Fixnum")
  typesig("upto<t> : (Integer) {(Integer) -> t} -> Integer")
  typesig("'zero?' : () -> %bool")
  typesig("'|' : (Numeric) -> Numeric", {'unwrap'=>[0]})
  typesig("'~' : () -> Numeric")
end

class Fixnum2
  rtc_annotated

  typesig("to_s: () -> String")
end

class Range
  rtc_annotated [:t, :each]

  typesig("'===' : (t) -> %bool", {'unwrap'=>[0]})
  typesig("'begin': () -> t")
  typesig("each : () {(t) -> .?} -> Range<t>")
  typesig("'end': () -> t")
  typesig("'eql?' <v> : (v) -> %bool", {'unwrap'=>[0]})
  typesig("'exclude_end?' : () -> %bool")
  typesig("first : () -> t")
  typesig("hash : () -> Fixnum")
  typesig("'include?' : (t) -> %bool", {'unwrap'=>[0]})
  typesig("initialize : (t, t, ?%bool) -> []", {'unwrap'=>[0,1,2]})
  typesig("inspect : () -> String")
  typesig("last : () -> t")
  typesig("'member?' : (t) -> %bool", {'unwrap'=>[0]})
  typesig("step<u> : (?Fixnum) {(t) -> u} -> Range", {'unwrap'=>[0]})
  typesig("to_s : () -> String")
end

class Dir
  rtc_annotated 

#  typesig("close : () -> NilClass")
#  typesig("each : () {String -> .?} -> Dir")
#  typesig("initialize : String -> []")
#  typesig("path : () -> String")
#  typesig("pos : () -> Integer")
 # typesig("pos= : Integer -> Integer")
 # typesig("read : () -> String")
 # typesig("rewind : () -> Dir")
 # typesig("seek : Integer -> Dir")
 # typesig("tell : () -> Fixnum")
 # typesig("Dir.[] : Array<String> -> Array<String>")
 # typesig("Dir.[] : (*String) -> Array<String>")
 # typesig("Dir.chdir : (?String) -> Fixnum")
 # typesig("Dir.chdir<t> : (?String) {String -> t} -> t")
 # typesig("Dir.chroot : String -> Fixnum")
 # typesig("Dir.delete : String -> Fixnum")
 # typesig("Dir.entries : String -> Array<String>")
 # typesig("Dir.foreach : (String) {String -> .?} -> NilClass")
 # typesig("Dir.getwd : () -> String")
 # typesig("Dir.glob : (Array<String>, ?Fixnum) -> Array<String>")
 # typesig("Dir.glob : (String, ?Fixnum) -> Array<String>")
 # typesig("Dir.glob<t> : (Array<String>, ?Fixnum) {String -> t} -> NilClass")
 # typesig("Dir.glob<t> : (String, ?Fixnum) {String -> t} -> NilClass")
 # typesig("Dir.mkdir : (String, ?Integer) -> Fixnum")
 # typesig("Dir.open : String -> Dir")
 # typesig("Dir.open<t> : (String) {Dir -> t} -> t")
 # typesig("Dir.pwd : () -> String")
 # typesig("Dir.rmdir : String -> Fixnum")
 # typesig("Dir.unlink : String -> Fixnum")
end

class Time
end

class Symbol
  rtc_annotated

  typesig("id2name : () -> String")
  typesig("inspect : () -> String")
  typesig("to_i : () -> Fixnum")
  typesig("to_int : () -> Fixnum")
  typesig("to_s : () -> String")
  typesig("to_sym : () -> Symbol")
end

class Regexp
  rtc_annotated

  typesig("'==' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("'===' : (String) -> %bool", {'unwrap'=>[0]})
  #  typesig("'=~' : [to_str : () -> String] -> Fixnum")
  typesig("'casefold?' : () -> %bool")
  typesig("'eql?' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("hash : () -> Fixnum")
  typesig("initialize : (String) -> []", {'unwrap'=>[0]})
  typesig("initialize : (Regexp) -> []", {'unwrap'=>[0]})
  typesig("initialize : (String, [], ?String) -> []", {'unwrap'=>[0,1,2]})
  typesig("inspect : () -> String")
  typesig("kcode : () -> String")
  typesig("match : (String) -> MatchData", {'unwrap'=>[0]})
  typesig("options : () -> Fixnum")
  typesig("source : () -> String")
  typesig("to_s : () -> String")
  #typesig("'~' : () -> Integer")
#  typesig("Regexp.compile : Regexp or String -> Regexp")
#  typesig("Regexp.compile : (String, String) -> Regexp")
#  typesig("Regexp.escape : String -> String")
#  typesig("Regexp.last_match : () -> MatchData ")
#  typesig("Regexp.last_match : Fixnum -> String")
#  typesig("Regexp.quote : String -> String")
#  typesig("Regexp.union : *(String or Regexp) -> Regexp ")
end

class TrueClass  
  rtc_annotated
  
  typesig("'&' : (TrueClass) -> %bool", {'unwrap'=>[0]})
  ##% "^" : TrueClass -> %bool        
  typesig("to_s : () -> String")
  typesig("'|' : (TrueClass) -> %bool", {'unwrap'=>[0]})
end

class FalseClass
  rtc_annotated
  
  typesig("'&' : (FalseClass) -> %bool", {'unwrap'=>[0]})
  ##% "^" : TrueClass -> %bool        
  typesig("to_s : () -> String")
  typesig("'|' : (FalseClass) -> %bool", {'unwrap'=>[0]})
end

class String
  rtc_annotated

#  typesig("'%' : [to_s: () -> String] -> String")
#  typesig("'%' : Array<[to_s : () -> String]>-> String")
  typesig("'*' : (Integer) -> String", {'unwrap'=>[0]})
#  typesig("'+' : (String) -> String", {'unwrap'=>[0]})
#  typesig("'+' : [to_str:()->String] -> String")
#  typesig("'<<' : [to_s : () -> String] -> String  ")
  typesig("'<=>' : (String) -> Fixnum", {'unwrap'=>[0]})
  typesig("'==' : (Object) -> %bool", {'unwrap'=>[0]})
#  typesig("'=~' : ['=~' : String -> Fixnum] -> Fixnum")
  typesig("'[]' : (Fixnum) -> Fixnum", {'unwrap'=>[0]})
  typesig("'[]' : (Range or Regexp or String) -> String", {'unwrap'=>[0]})
  typesig("'[]' : (Fixnum or Regexp, Fixnum) -> String", {'unwrap'=>[0]})
  typesig("'[]=' : (Fixnum, Fixnum) -> Fixnum", {'unwrap'=>[0,1]})
  typesig("'[]=' : (Fixnum, String) -> String", {'unwrap'=>[0,1]})
  typesig("'[]=' : (Fixnum, Fixnum, String) -> String", {'unwrap'=>[0,1,2]})
  typesig("'[]=' : (Range or Regexp or String, String) -> String", {'unwrap'=>[0,1]})
  typesig("capitalize : () -> String")
  typesig("'capitalize!' : () -> String")
  typesig("casecmp : (String) -> Fixnum", {'unwrap'=>[0]})
  typesig("center : (Integer, ?String) -> String", {'unwrap'=>[0,1]})
  typesig("chomp : (?String) -> String", {'unwrap'=>[0]})
  typesig("'chomp!' : (?String) -> String", {'unwrap'=>[0]})
  typesig("'chop!' : () -> String")
  typesig("chop : () -> String")
  typesig("concat : (Fixnum) -> String", {'unwrap'=>[0]})
  #  typesig("concat : [to_str : () -> String] -> String")
  typesig("count : (String, *String) -> Fixnum", {'unwrap'=>[0,1]})
  typesig("crypt : (String) -> String", {'unwrap'=>[0]})
  typesig("delete : (String, *String) -> String", {'unwrap'=>[0,1]})
  typesig("'delete!' : (String, *String) -> String", {'unwrap'=>[0,1]})
  typesig("downcase : () -> String")
  typesig("'downcase!' : () -> String")
  typesig("dump : () -> String")
  typesig("each : (?String) {(String) -> .?} -> String", {'unwrap'=>[0]})
  typesig("each_byte<t> : () {(Fixnum) -> t} -> String")
  typesig("each_line<t> : (?String) {(String) -> t} -> String", {'unwrap'=>[0]})
  typesig("'empty?' : () -> %bool")
  typesig("'eql?' : (Object) -> %bool", {'unwrap'=>[0]})
  typesig("gsub : (Regexp or String, String) -> String", {'unwrap'=>[0,1]})
  typesig("gsub : (Regexp or String) {(String) -> String} -> String", {'unwrap'=>[0,1]})
  typesig("'gsub!' : (Regexp or String, String) -> String", {'unwrap'=>[0,1]})
  typesig("'gsub!' : (Regexp or String) {(String) -> String} -> String", {'unwrap'=>[0,1]})
  typesig("hash : () -> Fixnum")
  typesig("hex : () -> Integer")
  typesig("'include?' : (Fixnum or String) -> %bool", {'unwrap'=>[0]})
  typesig("index : (String or Fixnum or Regexp, ?Fixnum) -> Fixnum", {'unwrap'=>[0,1]})
  #typesig("initialize : (?[to_str: () -> String]) -> []")
  typesig("insert : (Fixnum, String) -> String", {'unwrap'=>[0,1]})
  typesig("inspect : () -> String")
  typesig("intern : () -> String")
  typesig("length : () -> Fixnum")
  typesig("ljust : (Integer, ?String) -> String", {'unwrap'=>[0,1]})
  typesig("lstrip : () -> String")
  typesig("'lstrip!' : () -> String")
  typesig("match : (Regexp or String) -> MatchData", {'unwrap'=>[0]})
  typesig("next : () -> String")
  typesig("'next!' : () -> String")
  typesig("oct : () -> Integer")
  typesig("replace : (String) -> String", {'unwrap'=>[0]})
  typesig("reverse : () -> String")
  typesig("'reverse!' : () -> String")
  typesig("rindex : (String or Fixnum or Regexp, ?Fixnum) -> Fixnum", {'unwrap'=>[0,1]})
  typesig("rjust : (Integer, ?String) -> String", {'unwrap'=>[0,1]})
  typesig("rstrip : () -> String")
  typesig("'rstrip!' : () -> String")
  typesig("scan : (Regexp or String) -> Array", {'unwrap'=>[0]})
  typesig("scan<t> : (Regexp or String) {(*String) -> t} -> String", {'unwrap'=>[0]})
  typesig("size : () -> Integer")
  typesig("slice : (Fixnum) -> Fixnum", {'unwrap'=>[0]})
  typesig("slice : (Fixnum or Regexp, Fixnum) -> String", {'unwrap'=>[0,1]})
  typesig("slice : (Range or Regexp or String) -> String", {'unwrap'=>[0]})
  typesig("'slice!' : (Fixnum) -> Fixnum", {'unwrap'=>[0]})
  typesig("'slice!' : (Fixnum or Regexp, Fixnum) -> String", {'unwrap'=>[0,1]})
  typesig("'slice!' : (Range or Regexp or String) -> String", {'unwrap'=>[0]})
  typesig("split : () -> Array<String>")
  typesig("split : (String) -> Array<String>", {'unwrap'=>[0]})
  typesig("split : (Regexp) -> Array<String>", {'unwrap'=>[0]})
  typesig("split : (String, Fixnum) -> Array<String>", {'unwrap'=>[0,1]})
  typesig("split : (Regexp, Fixnum) -> Array<String>", {'unwrap'=>[0,1]})
  typesig("squeeze : (String) -> String", {'unwrap'=>[0]})
  typesig("'squeeze!' : (String) -> String", {'unwrap'=>[0]})
  typesig("strip : () -> String")
  typesig("'strip!' : () -> String")
  typesig("sub : (Regexp or String, String) -> String", {'unwrap'=>[0,2]})
  typesig("sub : (Regexp or String) {(String) -> String} -> String", {'unwrap'=>[0]})
  typesig("'sub!' : (Regexp or String, String) -> String", {'unwrap'=>[0,1]})
  typesig("'sub!' : (Regexp or String) {(String) -> String} -> String", {'unwrap'=>[0]})
  typesig("succ : () -> String")
  typesig("'succ!' : () -> String")
  typesig("sum : (?Fixnum) -> Integer", {'unwrap'=>[0]})
  typesig("swapcase : () -> String")
  typesig("'swapcase!' : () -> String")
  typesig("to_f : () -> Float")
  typesig("to_i : (?Fixnum) -> Fixnum", {'unwrap'=>[0]})
  typesig("to_s : () -> String")
#  typesig("to_str : () -> String")
  typesig("to_sym : () -> Symbol")
  typesig("tr : (String, String) -> String", {'unwrap'=>[0,1]})
  typesig("'tr!' : (String, String) -> String", {'unwrap'=>[0,1]})
  typesig("tr_s : (String, String) -> String")
  typesig("'tr_s!' : (String, String) -> String", {'unwrap'=>[0,1]})
  typesig("unpack : (String) -> .?", {'unwrap'=>[0]})
  typesig("upcase : () -> String")
  typesig("'upcase!' : () -> String")
  typesig("upto<t> : (String) {(String) -> t} -> String", {'unwrap'=>[0]})
end

class Array
  rtc_annotated [:t, :each]

  typesig("'[]' : (Range) -> Array<t>", {'unwrap'=>[0]})
  typesig("'[]' : (Fixnum, Fixnum) -> Array<t>")
  typesig("'[]' : (Fixnum) -> t", {'unwrap'=>[0]})
  typesig("'[]' : (Float) -> t", {'unwrap'=>[0]})
  typesig("'&'<u>: (Array<u>) -> Array<t>")
  typesig("'*': (Fixnum) -> Array<t>")
  typesig("'*': (String) -> String")
  typesig("'+'<u>: (Array<u>) -> Array<u or t>")
  typesig("'-'<u>: (Array<u>) -> Array<t>")
  typesig("slice: (Fixnum) -> t")
  typesig("slice: (Fixnum,Fixnum) -> Array<t>")
  typesig("slice: (Range) -> Array<t>")
  typesig("'[]=': (Fixnum, t) -> t")
  typesig("'[]=': (Fixnum, Fixnum,t) -> t")
  typesig("'[]=': (Fixnum, Fixnum,Array<t>) -> Array<t>")
  typesig("'[]=': (Range,Array<t>) -> Array<t>")
  typesig("'[]=': (Range,t) -> t")
  typesig("assoc: (t) -> Array<t>")
  typesig("at: (Fixnum) -> t")
  typesig("clear: () -> Array<t>")
  typesig("map<u>: () {(t) ->  u } -> Array<u>")
  typesig("collect<u>: () { (t) -> u } -> Array<u>")
  typesig("map<u>: () -> Enumerator")
  typesig("collect<u>: () -> Enumerator")
  typesig("combination: (Fixnum) { (Array<t>) -> %any } -> Array<t>")
  typesig("combination: (Fixnum) -> Enumerator")
  typesig("push: (t) -> Array<t>", {'mutate'=>true})
  typesig("compact: () -> Array<t>")
  typesig("'compact!': () -> Array<t>")
  typesig("concat: (Array<t>) -> Array<t>")
  typesig("count: () -> Fixnum")
  typesig("count: (t) -> Fixnum")
  typesig("count: () { (t) -> %bool } -> Fixnum")
  typesig("cycle: (?Fixnum) { (t) -> %any } -> %any")
  typesig("cycle: (?Fixnum) -> Enumerator")
  typesig("delete<u>: (u) -> t")
  typesig("delete<u,v>: (u) { () -> v } -> t or v")
  typesig("delete_at: (Fixnum) -> Array<t>")
  typesig("delete_if: () { (t) -> %bool } -> Array<t>")
  typesig("delete_if: () -> Enumerator")
  typesig("drop: (Fixnum) -> Array<t>")
  typesig("drop_while: () { (t) -> %bool } -> Array<t>")
  typesig("drop_while: () -> Enumerator")
  typesig("each: () { (t) -> %any } -> Array<t>")
  typesig("each_index: () { (Fixnum) -> %any } -> Array<t>")
  typesig("each_index: () -> Enumerator")
  typesig("'empty?': () -> %bool")
  typesig("fetch: (Fixnum) -> t")
  typesig("fetch<u>: (Fixnum, u) -> u")
  typesig("fetch<u>: (Fixnum) { (Fixnum) -> u } -> t or u")
  typesig("fill: (t) -> Array<t>")
  typesig("fill: (t,Fixnum,?Fixnum) -> Array<t>")
  typesig("fill: (t, Range) -> Array<t>")
  typesig("fill: () { (Fixnum) -> t } -> Array<t>")
  typesig("fill: (Fixnum,?Fixnum) { (Fixnum) -> t } -> Array<t>")
  typesig("fill: (Range) { (Fixnum) -> t } -> Array<t>")
  typesig("index<u>: (u) -> Fixnum")
  typesig("index: () { (t) -> %bool } -> Fixnum")
  typesig("index: () -> Enumerator")
  typesig("first: () -> t")
  typesig("first: (Fixnum) -> Array<t>")
  typesig("'include?'<u>: (u) -> %bool")
  typesig("insert: (Fixnum, *t) -> Array<t>")
  typesig("to_s: () -> String")
  typesig("inspect: () -> String")
  typesig("join: (?String) -> String")
  typesig("keep_if: () { (t) -> %bool } -> Array<t>")
  typesig("last: () -> t")
  typesig("last: (Fixnum) -> Array<t>")
  typesig("length: () -> Fixnum")
  typesig("permutation: (?Fixnum) -> Enumerator")
  typesig("permutation: (?Fixnum) { (Array<t>) -> %any } -> Array<t>")
  typesig("pop: (Fixnum) -> Array<t>")
  typesig("pop: () -> t")
  typesig("product<u>: (*Array<u>) -> Array<Array<t or u>>")
  typesig("rassoc<u>: (u) -> t")
  typesig("reject: () { (t) -> %bool } -> Array<t>")
  typesig("reject: () -> Enumerator")
  typesig("'reject!': () { (t) -> %bool } -> Array<t>")
  typesig("'reject!': () -> Enumerator")
  typesig("repeated_combination: (Fixnum) { (Array<t>) -> %any } -> Array<t>")
  typesig("repeated_combination: (Fixnum) -> Enumerator")
  typesig("repeated_permutation: (Fixnum) { (Array<t>) -> %any } -> Array<t>")
  typesig("repeated_permutation: (Fixnum) -> Enumerator")
  typesig("reverse: () -> Array<t>")
  typesig("'reverse!': () -> Array<t>")
  typesig("reverse_each: () { (t) -> %any } -> Array<t>")
  typesig("reverse_each: () -> Enumerator")
  typesig("rindex<u>: (u) -> t")
  typesig("rindex: () { (t) -> %bool } -> Fixnum")
  typesig("rindex: () -> Enumerator")
  typesig("rotate: (?Fixnum) -> Array<t>")
  typesig("'rotate!': (?Fixnum) -> Array<t>")
  typesig("sample: () -> t")
  typesig("sample: (Fixnum) -> Array<t>")
  typesig("select: () { (t) -> %bool } -> Array<t>")
  typesig("select: () -> Enumerator")
  typesig("'select!': () { (t) -> %bool } -> Array<t>")
  typesig("'select!': () -> Enumerator")
  typesig("shift: () -> t")
  typesig("shift: (Fixnum) -> Array<t>")
  typesig("shuffle: () -> Array<t>")
  typesig("'shuffle!': () -> Array<t>")
  typesig("size: () -> Fixnum")
  typesig("slice: (Range) -> Array<t>", {'unwrap'=>[0]})
  typesig("slice: (Fixnum, Fixnum) -> Array<t>")
  typesig("slice: (Fixnum) -> t", {'unwrap'=>[0]})
  typesig("slice: (Float) -> t", {'unwrap'=>[0]})
  typesig("'slice!': (Range) -> Array<t>", {'unwrap'=>[0]})
  typesig("'slice!': (Fixnum, Fixnum) -> Array<t>")
  typesig("'slice!': (Fixnum) -> t", {'unwrap'=>[0]})
  typesig("'slice!': (Float) -> t", {'unwrap'=>[0]})
  typesig("sort: () -> Array<t>")
  typesig("sort: () { (t,t) -> Fixnum } -> Array<t>")
  typesig("'sort!': () -> Array<t>")
  typesig("'sort!': () { (t,t) -> Fixnum } -> Array<t>")
  typesig("'sort_by!'<u>: () { (t) -> u } -> Array<t>")
  typesig("'sort_by!': () -> Enumerator")
  typesig("take: (Fixnum) -> Array<t>")
  typesig("take_while: () { (t) ->%bool } -> Array<t>")
  typesig("take_while: () -> Enumerator")
  typesig("to_a: () -> Array<t>", {'unwrap' => [-1]})
  typesig("to_ary: () -> Array<t>", {'unwrap' => [-1]})
  typesig("transponse: () -> Array<t>")
  typesig("uniq: () -> Array<t>")
  typesig("'uniq!': () -> Array<t>")
  typesig("unshift: (*t) -> Array<t>")
  typesig("values_at: (*Range or Fixnum) -> Array<t>")
  typesig("zip<u>: (*Array<u>) -> Array<Array<t or u>>", {'unwrap' => [0]})
  typesig("'|'<u>: (Array<u>) -> Array<t or u>")
end

class Rtc::NativeArray < Array
  instance_methods.each {
    |m|
    if self.method_defined?(Rtc::MethodWrapper.mangle_name(m))
      eval("alias :#{m} :#{Rtc::MethodWrapper.mangle_name(m)}")
    end
  }
end

class Hash
  rtc_annotated [:k, :each_key], [:v, :each_value]

  typesig("'[]' : (k) -> v", {'unwrap'=>[0]})
  typesig("'[]=' : (k, v) -> v", {'unwrap'=>[0]})
  typesig("store: (k,v) -> v", {'unwrap' => [0]})
  typesig("assoc: (k) -> Tuple<k,v>")
  typesig("clear: () -> Hash<k,v>")
  typesig("compare_by_identity: () -> Hash<k,v>")
  typesig("'compare_by_indentity?': () -> %bool")
  typesig("default: (?k) -> v")
  typesig("'default=': (v) -> v")
  typesig("default_proc: () -> (Hash<k,v>,k) -> v")
  typesig("'default_proc=': ((Hash<k,v>,k) -> v) -> (Hash<k,v>,k) -> v")
  typesig("delete: (k) -> v")
  typesig("delete<u>: (k) { (k) -> u } -> u or v")
  typesig("delete_if: () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("delete_if: () -> Enumerator")
  typesig("each: () { (k,v) -> %any } -> Hash<k,v>")
  typesig("each: () -> Enumerator")
  typesig("each_pair: () { (k,v) -> %any } -> Hash<k,v>")
  typesig("each_pair: () -> Enumerator")
  typesig("each_key: () { (k) -> %any } -> Hash<k,v>")
  typesig("each_key: () -> Enumerator")
  typesig("each_value: () { (v) -> %any } -> Hash<k,v>")
  typesig("each_value: () -> Enumerator")
  typesig("'empty?': () -> %bool")
  typesig("fetch: (k) -> v")
  typesig("fetch<u>: (k,u) -> u or v")
  typesig("fetch<u>: (k) { (k) -> u } -> u or v")
  typesig("'member?'<t>: (t) -> %bool")
  typesig("'has_key?'<t>: (t) -> %bool")
  typesig("'key?'<t>: (t) -> %bool")
  typesig("'has_value?'<t>: (t) -> %bool")
  typesig("'value?'<t>: (t) -> %bool")
  typesig("to_s: () -> String")
  typesig("inspect: () -> String")
  typesig("invert: () -> Hash<v,k>")
  typesig("keep_if: () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("keep_if: () -> Enumerator")
  typesig("key<t>: (t) -> k")
  typesig("keys: () -> Array<k>")
  typesig("length: () -> Fixnum")
  typesig("size: () -> Fixnum")
  typesig("merge<a,b>: (Hash<a,b>) -> Hash<a or k, b or v>")
  typesig("merge<a,b>: (Hash<a,b>) { (k,v,b) -> v or b } -> Hash<a or k, b or v>")
  typesig("rassoc: (k) -> Tuple<k,v>")
  typesig("rehash: () -> Hash<k,v>")
  typesig("reject: () -> Enumerator")
  typesig("reject: () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("'reject!': () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("select: () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("'select!': () { (k,v) -> %bool } -> Hash<k,v>")
  typesig("shift: () -> Tuple<k,v>")
  typesig("to_a: () -> Array<Tuple<k,v>>")
  typesig("to_hash: () -> Hash<k,v>")
  typesig("values: () -> Array<v>")
  typesig("values_at: (*k) -> Array<v>")
end

class Rtc::NativeHash
  instance_methods.each {
    |m|
    if self.method_defined?(Rtc::MethodWrapper.mangle_name(m))
      eval("alias :#{m} :#{Rtc::MethodWrapper.mangle_name(m)}")
    end
  }
end
